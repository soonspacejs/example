import{Box3 as e,Vector3 as s,Plane as n}from"three";class i{constructor(e){this.ssp=e,this.scenePlaneHelpers={x:null,y:null,z:null}}addPlaneHelper(e,s,n){const i=this.ssp.addPlaneHelper(Object.assign(Object.assign({},s),{opacity:.3}));this.scenePlaneHelpers[e]=i,n&&this.ssp.addObject(i,n)}sceneClipping(i){var t,a,l;const{axis:r,clipPoint:p,isForward:c=!0,openHelper:o=!0}=i,h=c?p-1:1-p,d=`scene_clippingPlaneHelper_${r}`;if(o)if(this.scenePlaneHelpers[r])switch(r){case"x":null===(t=this.scenePlaneHelpers[r])||void 0===t||t.position.setX(h);break;case"y":null===(a=this.scenePlaneHelpers[r])||void 0===a||a.position.setY(h);break;case"z":null===(l=this.scenePlaneHelpers[r])||void 0===l||l.position.setZ(h)}else{const n=(new e).setFromObject(this.ssp.manager.store.modelManager.scene),i=n.getSize(new s);let t=0,a=0,l="green";const p=n.getCenter(new s).clone(),c={x:0,y:0,z:0};switch(r){case"x":t=i.z,a=i.y,l="green",p.x=h,c.y=Math.PI/2;break;case"y":t=i.x,a=i.z,l="blue",p.y=h,c.x=Math.PI/2;break;case"z":t=i.x,a=i.y,p.z=h,l="red"}this.addPlaneHelper(r,{id:d,width:t,height:a,color:l,position:p,rotation:c})}else this.scenePlaneHelpers[r]&&(this.ssp.removeHelperById(d),this.scenePlaneHelpers[r]=null);const g={x:new s(c?-1:1,0,0),y:new s(0,c?-1:1,0),z:new s(0,0,c?-1:1)},P=this.ssp.viewport.renderer.clippingPlanes.find((e=>1===Math.abs(e.normal[r])));P?(P.normal=g[r],P.constant=p):this.ssp.viewport.renderer.clippingPlanes.push(new n(g[r],p)),this.ssp.signals.sceneChanged.dispatch()}removeSceneClipping(e){if(e){const s=this.ssp.viewport.renderer.clippingPlanes.findIndex((s=>1===Math.abs(s.normal[e])));this.ssp.viewport.renderer.clippingPlanes.splice(s,1)}else this.ssp.viewport.renderer.clippingPlanes=[];this.ssp.signals.sceneChanged.dispatch()}modelClipping(i,t){const{axis:a,clipPercent:l,isForward:r=!0,openHelper:p=!0}=t,c=(new e).setFromObject(i);c.max.add(new s(2,2,2)),c.min.sub(new s(2,2,2));const o=c.getSize(new s),h=r?c.max[a]-l/100*o[a]+1:c.min[a]+l/100*o[a]-1,d=r?h+1:h-1,g=`model_${i.sid}_clippingPlaneHelper_${a}`,P=this.ssp.getObjectById(g);if(p)if(P)switch(a){case"x":null==P||P.position.setX(d);break;case"y":null==P||P.position.setY(d);break;case"z":null==P||P.position.setZ(d)}else{const e=c.getSize(new s);let n=0,i=0,t="green";const l=c.getCenter(new s).clone(),r={x:0,y:0,z:0};switch(a){case"x":n=e.z,i=e.y,t="green",l.x=d,r.y=Math.PI/2;break;case"y":n=e.x,i=e.z,t="blue",l.y=d,r.x=Math.PI/2;break;case"z":n=e.x,i=e.y,l.z=d,t="red"}this.addPlaneHelper(a,{id:g,width:n,height:i,color:t,position:l,rotation:r})}else P&&this.ssp.removeObjectById(g);const m={x:new s(r?-1:1,0,0),y:new s(0,r?-1:1,0),z:new s(0,0,r?-1:1)};i.traverse((e=>{if(e.material){const s=e,i=e=>{e.clippingPlanes||(e.clippingPlanes=[]);const s=e.clippingPlanes.find((e=>1===Math.abs(e.normal[a])));if(s)s.normal=m[a],s.constant=h,r||s.negate();else{const s=new n(m[a],h);r||s.negate(),e.clippingPlanes.push(s)}};Array.isArray(s.material)?s.material.forEach((e=>i(e))):i(s.material)}})),this.ssp.signals.sceneChanged.dispatch()}removeModelClipping(e,s){const n=e=>{if(s){const n=e.clippingPlanes.findIndex((e=>1===Math.abs(e.normal[s])));e.clippingPlanes.splice(n,1)}else e.clippingPlanes=null};e.traverse((e=>{if(e.material){const s=e;Array.isArray(s.material)?s.material.forEach((e=>n(e))):n(s.material)}})),this.ssp.signals.sceneChanged.dispatch()}}export{i as default};
