class s{constructor(s){this.ssp=s,this.nodes=[],this.topology=null,this.mouseDownNode=null,this.mouseDownObject=null,this.mouseMoveNode=null,this.options={id:"draing_topology",type:"line",nodes:[]},this.viewport=s.viewport,this.onMouseDowm=this.onMouseDowm.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onClick=this.onClick.bind(this),this.onDblClick=this.onDblClick.bind(this),this.onRightClick=this.onRightClick.bind(this),this.onKeyUp=this.onKeyUp.bind(this)}start(s){this.options=s,this.ssp.signals.mouseDown.add(this.onMouseDowm),this.ssp.signals.mouseMove.add(this.onMouseMove),this.ssp.signals.click.add(this.onClick),this.ssp.signals.dblClick.add(this.onDblClick),this.ssp.signals.rightClick.add(this.onRightClick),this.ssp.signals.keyUp.add(this.onKeyUp)}stop(){this.nodes=[],this.mouseDownNode=null,this.mouseDownObject=null,this.mouseMoveNode=null,this.options={id:"draing_topology",type:"line",nodes:[]},this.ssp.signals.mouseDown.remove(this.onMouseDowm),this.ssp.signals.mouseMove.remove(this.onMouseMove),this.ssp.signals.click.remove(this.onClick),this.ssp.signals.dblClick.remove(this.onDblClick),this.ssp.signals.rightClick.remove(this.onRightClick),this.ssp.signals.keyUp.remove(this.onKeyUp)}onMouseDowm(s){const[o]=this.ssp.viewport.getIntersects(s);if(o){const{object:s,point:i}=o;this.mouseDownNode={id:`node${this.nodes.length+1}`,name:`node${this.nodes.length+1}`,position:i.setY(i.y+.01),graphs:[]},this.mouseDownObject=s}}onMouseMove(s){const[o]=this.ssp.viewport.getIntersects(s);o&&(this.mouseMoveNode={id:`node${this.nodes.length+1}`,name:`node${this.nodes.length+1}`,position:o.point.clone().setY(o.point.y),graphs:[]},this.renderTopology([...this.nodes,this.mouseMoveNode]))}onClick(){this.pushNode()}onDblClick(){var s,o;this.pushNode(),null===(o=(s=this.options).onDone)||void 0===o||o.call(s,[...this.nodes]),this.stop()}onRightClick(s){this.popNode()}onKeyUp(s){var o,i,t,e;switch(s.code){case"Backspace":this.popNode();break;case"Enter":this.renderTopology(this.nodes),null===(i=(o=this.options).onDone)||void 0===i||i.call(o,[...this.nodes]),this.stop();break;case"Escape":this.ssp.removeTopologyById(this.options.id),null===(e=(t=this.options).onCancel)||void 0===e||e.call(t),this.stop()}}pushNode(){var s,o;this.mouseDownNode&&this.mouseDownObject&&(this.nodes.push(this.mouseDownNode),this.renderTopology(this.nodes),null===(o=(s=this.options).onAdd)||void 0===o||o.call(s,this.mouseDownNode,this.mouseDownObject),this.mouseDownNode=null,this.mouseDownObject=null)}popNode(){var s,o;const i=this.nodes.pop();i&&(this.renderTopology(this.nodes),null===(o=(s=this.options).onUndo)||void 0===o||o.call(s,i))}renderTopology(s){this.topology?this.ssp.resetTopologyNodes(this.topology,s):this.topology=this.ssp.createTopology(Object.assign(Object.assign({},this.options),{type:"line",nodes:s}))}}export{s as default};
