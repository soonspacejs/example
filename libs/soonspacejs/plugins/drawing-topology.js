import s from"soonspacejs";const{randomString:o}=s.utils;class i{constructor(s){this.ssp=s,this.drawing=!1,this.nodes=[],this.topology=null,this.mouseDownNode=null,this.mouseDownObject=null,this.mouseMoveNode=null,this.options={id:"drawing_topology",type:"line",nodes:[]},this.viewport=s.viewport,this.onMouseDowm=this.onMouseDowm.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onClick=this.onClick.bind(this),this.onDblClick=this.onDblClick.bind(this),this.onRightClick=this.onRightClick.bind(this),this.onKeyUp=this.onKeyUp.bind(this)}start(s){this.options=s,this.drawing=!0,this.ssp.signals.mouseDown.add(this.onMouseDowm),this.ssp.signals.mouseMove.add(this.onMouseMove),this.ssp.signals.click.add(this.onClick),this.ssp.signals.dblClick.add(this.onDblClick),this.ssp.signals.rightClick.add(this.onRightClick),this.ssp.signals.keyUp.add(this.onKeyUp)}undo(){var s,o;const i=this.nodes.pop();i&&(this.renderTopology(this.nodes),null===(o=(s=this.options).onUndo)||void 0===o||o.call(s,i))}done(){var s,o;this.renderTopology(this.nodes),null===(o=(s=this.options).onDone)||void 0===o||o.call(s,[...this.nodes],this.topology),this.stop()}cancel(){var s,o;this.topology&&this.ssp.removeObject(this.topology),null===(o=(s=this.options).onCancel)||void 0===o||o.call(s),this.stop()}stop(){this.nodes=[],this.topology=null,this.mouseDownNode=null,this.mouseDownObject=null,this.mouseMoveNode=null,this.options={id:"drawing_topology",type:"line",nodes:[]},this.drawing=!1,this.ssp.signals.mouseDown.remove(this.onMouseDowm),this.ssp.signals.mouseMove.remove(this.onMouseMove),this.ssp.signals.click.remove(this.onClick),this.ssp.signals.dblClick.remove(this.onDblClick),this.ssp.signals.rightClick.remove(this.onRightClick),this.ssp.signals.keyUp.remove(this.onKeyUp)}onMouseDowm(s){const[i]=this.ssp.viewport.getIntersects(s);if(i){const{object:s,point:t}=i,e=o();this.mouseDownNode={id:`node${e}`,name:`node${e}`,position:t.setY(t.y+.01),graphs:[]},this.mouseDownObject=s}}onMouseMove(s){const[i]=this.ssp.viewport.getIntersects(s);if(i){const s=o();this.mouseMoveNode={id:`node${s}`,name:`node${s}`,position:i.point.clone().setY(i.point.y),graphs:[]},this.renderTopology([...this.nodes,this.mouseMoveNode])}}onClick(){this.pushNode()}onDblClick(){var s,o;this.pushNode(),null===(o=(s=this.options).onDone)||void 0===o||o.call(s,[...this.nodes],this.topology),this.stop()}onRightClick(){this.undo()}onKeyUp(s){switch(s.code){case"Backspace":this.undo();break;case"Enter":this.done();break;case"Escape":this.cancel()}}pushNode(){var s,o;this.mouseDownNode&&this.mouseDownObject&&(this.nodes.push(this.mouseDownNode),this.renderTopology(this.nodes),null===(o=(s=this.options).onAdd)||void 0===o||o.call(s,this.mouseDownNode,this.mouseDownObject),this.mouseDownNode=null,this.mouseDownObject=null)}renderTopology(s){this.topology?this.ssp.resetTopologyNodes(this.topology,s):this.topology=this.ssp.createTopology(Object.assign(Object.assign({},this.options),{type:"line",nodes:s}))}}export{i as default};
