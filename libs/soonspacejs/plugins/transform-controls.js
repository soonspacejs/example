import{Mesh as e}from"three";import{TransformControls as t}from"three/examples/jsm/controls/TransformControls.js";class s{constructor(e){this.ssp=e,this.controls=new Set}start(e,s={}){const{mode:o="translate",onUpdate:r,onDragStart:n,onDragEnd:a,onClose:i}=s,l=new t(this.ssp.viewport.camera,this.ssp.viewport.rendererManager.interactiveContainer);this.controls.add(l),l.attach(e),l.mode=o,l.addEventListener("dragging-changed",(t=>{this.ssp.controls.enabled=!t.value,t.value?null==n||n(e):null==a||a(e)})),l.addEventListener("objectChange",(()=>{null==r||r(e),this.ssp.signals.objectChanged.dispatch(e)}));const c=l.getHelper();return c.addEventListener("removed",(()=>{null==i||i()})),this.ssp.viewport.scene.add(c),this.ssp.render(),l}_getPreviousControl(){return[...this.controls].at(-1)}close(t=this._getPreviousControl()){if(t){t.detach(),t.disconnect();const s=t.getHelper();s.traverse((function(t){t instanceof e&&(t.geometry&&t.geometry.dispose(),t.material&&t.material.dispose())})),this.ssp.removeObject(s),this.controls.delete(t)}}closeAll(){this.controls.forEach((e=>this.close(e))),this.controls.clear()}changeMode(e=this._getPreviousControl(),t="translate"){e&&e.mode!==t&&(e.mode=t,this.ssp.signals.objectChanged.dispatch())}}export{s as default};
