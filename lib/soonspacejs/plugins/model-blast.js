class s{constructor(s){this.ssp=s,this.object=null,this.scalar=100}start(s,t){this.object=s,t&&(this.scalar=t);const e=(new this.ssp.THREE.Box3).expandByObject(s),o=(new this.ssp.THREE.Vector3).addVectors(e.max,e.min).multiplyScalar(.5);s.traverse((s=>{if("Mesh"===s.type||"BaseMesh"===s.type){if(!s.userData.worldDir){const t=new this.ssp.THREE.Box3;t.setFromObject(s);const e=(new this.ssp.THREE.Vector3).addVectors(t.max,t.min).multiplyScalar(.5);s.userData.worldDir=(new this.ssp.THREE.Vector3).subVectors(e,o).normalize(),s.userData.oldPosition=s.position.clone()}s.position.copy((new this.ssp.THREE.Vector3).copy(s.userData.oldPosition).add((new this.ssp.THREE.Vector3).copy(s.userData.worldDir).multiplyScalar(this.scalar)))}})),this.ssp.signals.objectChanged.dispatch()}stop(s){const t=s||this.object;null==t||t.traverse((s=>{"Mesh"!==s.type&&"BaseMesh"!==s.type||!s.userData.oldPosition||(s.position.copy(s.userData.oldPosition),delete s.userData.worldDir,delete s.userData.oldPosition)})),this.object=null,this.scalar=100,this.ssp.signals.objectChanged.dispatch()}}export{s as default};
