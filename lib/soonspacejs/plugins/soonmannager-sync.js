class t{constructor(t){this.poiInfo=[],this.poi3DInfo=[],this.treeData=[],this.loadedCount=0,this.isLoaded=!1,this.idleTaskList=[],this.format3DInfo=t=>{const{utils:{deg2Euler:i}}=this.ssp,{id:e,filepath:s,modelname:o,x:l=0,y:n=0,z:a=0,rotation_x:r=0,rotation_y:h=0,rotation_z:c=0,scale_x:d=1,scale_y:g=1,scale_z:p=1,visible:f}=t;return{url:s?this.baseUrl+s:"",id:e,name:o,position:{x:l,y:n,z:a},rotation:{x:i(r),y:i(h),z:i(c)},scale:{x:d,y:g,z:p},visible:null==f||f,userData:{...t}}},this.ssp=t,this.baseUrl=null,this.projectInfo=null,this.globalSetting=null}setBaseUrl(t){this.baseUrl=t}fetchInfo(t){return fetch(`${this.baseUrl}db/${t}.json`).then((t=>t.json())).catch((t=>console.error(t)))}getPoiInfo(){return this.fetchInfo("poiInfo").then((t=>(this.poiInfo=[...t],this.poi3DInfo=this.poiInfo.filter((t=>"3D"===t.category_type)),Promise.resolve(t)))).catch((t=>console.error(t)))}getGlobalSetting(){return this.fetchInfo("globalSetting").then((t=>(this.globalSetting=t[0],Promise.resolve(t[0])))).catch((t=>console.error(t)))}setGlobalSetting(t){t?(this.globalSetting=t,this._initGlobalSetting()):this.getGlobalSetting().then((()=>{this._initGlobalSetting()})).catch((t=>console.error(t)))}_initGlobalSetting(){if(!this.globalSetting)return;const{color:t,ambientLight:i,hemisphereLight:e,directionalLight:s,fog:o}=this.globalSetting;t&&this.syncBackgroundColor(t),this.ssp.clearLight(),i&&this.syncAmbientLight(i),e&&this.syncHemisphereLight(e),s&&this.syncDirectionalLight(s),o&&this.syncFog(o)}syncBackgroundColor(t){t&&this.ssp.setBackgroundColor(t)}syncAmbientLight(t){const{color:i,intensity:e}=t,s={id:"sm_ambientLight",color:i||"#9a9a9a",intensity:e||1};this.ssp.createAmbientLight(s)}syncHemisphereLight(t){const i={...t,id:"sm_hemisphereLight",intensity:t.hemisphereLight_intensity,skycolor:t.hemisphereLight_skycolor,groundcolor:t.hemisphereLight_groundcolor};this.ssp.createHemisphereLight(i)}syncDirectionalLight(t){const{color:i,intensity:e,position:s={x:0,y:500,z:0},target:o={x:0,y:-100,z:0}}=t,l={id:"sm_directionalLight",color:i||"#ffffff",intensity:e||1,position:{x:s.x||0,y:s.y||500,z:s.z||0},target:{x:o.x||0,y:o.y||-100,z:o.z||0}};this.ssp.createDirectionalLight(l)}syncFog(t){t.visible?this.ssp.openSceneFog(t):this.ssp.closeSceneFog()}async poiInfoData2Tree(){var t;if(null===(t=this.treeData)||void 0===t?void 0:t.length)return;const i=[],e=new Set,s=await this.getPoiInfo();if(s){s.forEach((t=>{e.add(t.id)})),s.forEach((t=>{e.has(t.pid)||i.push({...t,children:[]})})),i.forEach((t=>{const i=s.findIndex((i=>i.id===t.id));-1!==i&&s.splice(i,1)}));const t=(i,e)=>{const s=[];i.forEach((t=>{t.pid===e.id&&s.push(t)})),s.length>0&&(e.children=s,e.children.forEach((e=>t(i,e))))};i.forEach((i=>t(s,i)))}this.treeData=i}async loadScene(t={}){const{targetId:i,targetLevel:e,isIdleRest:s=!1,loadSceneAllSuccess:o=(()=>{})}=t;await this.poiInfoData2Tree();const l=this.treeData,n=async(t=[],l=!1,a=1)=>{if(!t||!t.length)return Promise.resolve();if("number"==typeof e&&+e>=1&&a>e)return Promise.resolve();const r=t.filter((t=>"3D"===t.category_type)).map((t=>this.format3DInfo(t)));if(i){if(l)return await this.loadRest(r,a,{isIdleRest:s,loadSceneAllSuccess:o}),void await Promise.allSettled(t.map((t=>n(t.children,!0,a+1))));const e=Array.isArray(i)?i:[i];for(const i of e){const e=r.find((t=>t.id===i));if(e){await this.loadSbmOrModel(e);const s=t.find((t=>t.id===i));s&&await n(s.children,!0,a+1)}}await Promise.allSettled(t.map((t=>n(t.children,!1,a))))}else await this.loadRest(r,a,{isIdleRest:s,loadSceneAllSuccess:o}),await Promise.allSettled(t.map((t=>n(t.children,!1,a+1))))};await n(l),s&&1!==e&&0!==this.idleTaskList.length||setTimeout((()=>{o()}))}async loadRest(t,i,{isIdleRest:e,loadSceneAllSuccess:s}){if(0!==t.length){if(e&&i>1){let i;const e=()=>{this.loadSbmOrModel(t).finally((()=>{const t=this.idleTaskList.findIndex((t=>t===i));-1!==t&&this.idleTaskList.splice(t,1),0!==this.idleTaskList.length||this.isLoaded||(this.isLoaded=!0,null==s||s())}))};return i="function"==typeof requestIdleCallback?requestIdleCallback(e):setTimeout(e),void this.idleTaskList.push(i)}await Promise.allSettled(t.map((t=>this.loadSbmOrModel(t))))}}isSbm(t){return t.endsWith(".sbm")}async loadSbmOrModel(t){if(!this.ssp.viewport.state.isDisposed){if(Array.isArray(t)){const{sbmList:i,modelList:e}={sbmList:[],modelList:[]};return t.reduce(((t,i)=>(this.isSbm(i.url)?t.sbmList.push(i):i.url&&t.modelList.push(i),t)),{sbmList:i,modelList:e}),Promise.allSettled([i.length&&this.ssp.loadSbmToGroup({id:`${i[0].userData.pid}_group`},i),e.length&&this.ssp.loadModelToGroup({id:`${e[0].userData.pid}_group`},e)])}return this.isSbm(t.url)?this.ssp.loadSbm(t):this.ssp.loadModel(t)}}}export{t as default};
